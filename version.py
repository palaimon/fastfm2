import configparser


def write_release_version(version):
    with open("version.txt", "w") as f:
        f.write("%s\n\n"
                "Version number is <auto-generated> by Makefile. \n"
                "DO NOT CHANGE! \n" % version)


def read_release_version():
    try:
        with open("version.txt", "r") as f:
            version = f.readlines()[0]
            return version.strip()

    except:
        return None


def get_version_from_txt():
    version = read_release_version()

    if version is None:
        raise ValueError("Cannot find the version number!")

    return version


def get_version_from_pyproject():
    config = configparser.ConfigParser()
    config.read('pyproject.toml')
    if 'tool.poetry' not in config.sections():
        raise ValueError("Invalid pyproject.toml")
    return config['tool.poetry'].get('version', '0').strip('"')


def check_update_current_version():
    current_versio = get_version_from_pyproject()
    if current_versio and current_versio != get_version_from_txt():
        write_release_version(current_versio)


if __name__ == "__main__":
    print(get_version_from_txt())
    print(get_version_from_pyproject())
    check_update_current_version()
